'From Cuis6.3 [latest update: #6222] on 7 December 2024 at 7:53:26 pm'!
'Description '!
!provides: 'Quaternion Algebra' 1 1!
SystemOrganization addCategory: #'Quaternion Algebra'!


!classDefinition: #QuaternionAlgebra category: #'Quaternion Algebra'!
FiniteAlgebra subclass: #QuaternionAlgebra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Quaternion Algebra'!
!classDefinition: 'QuaternionAlgebra class' category: #'Quaternion Algebra'!
QuaternionAlgebra class
	instanceVariableNames: ''!

!classDefinition: #Quaternion category: #'Quaternion Algebra'!
FiniteAlgebraElement subclass: #Quaternion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Quaternion Algebra'!
!classDefinition: 'Quaternion class' category: #'Quaternion Algebra'!
Quaternion class
	instanceVariableNames: ''!


!QuaternionAlgebra commentStamp: 'len 10/3/2022 08:29:48' prior: 0!
The algebra of quaternions over a ring with given invariants a and b, where a and b are units. This is the 4-dimensional unital algebra generated by elements i, j such that i^2 = a, j^2 = b and ij = -ji.!

!Quaternion commentStamp: 'len 7/14/2020 21:25:41' prior: 0!
Elements of a quaternion algebra. See QuaternionAlgebra.!

!QuaternionAlgebra methodsFor: 'accessing' stamp: 'len 7/2/2020 13:06:25'!
generators
	^ self propertyAt: #generators ifAbsentPut: [{self i. self j}]! !

!QuaternionAlgebra methodsFor: 'accessing' stamp: 'len 7/2/2020 13:05:58'!
i
	^ self basis at: 2! !

!QuaternionAlgebra methodsFor: 'accessing' stamp: 'len 7/14/2020 10:08:51'!
invariants
	"Answer the invariants a,b of this quaternion algebra."
	^ self propertyAt: #invariants ifAbsentPut: [{self i squared asScalar. self j squared asScalar}]! !

!QuaternionAlgebra methodsFor: 'accessing' stamp: 'len 7/2/2020 13:06:04'!
j
	^ self basis at: 3! !

!QuaternionAlgebra methodsFor: 'accessing' stamp: 'len 7/2/2020 13:06:12'!
k
	^ self basis at: 4! !

!QuaternionAlgebra methodsFor: 'elements' stamp: 'len 12/1/2024 14:13:46'!
fromModuleElement: anElement
	^ Quaternion parent: self carrier: anElement! !

!QuaternionAlgebra methodsFor: 'printing' stamp: 'len 10/6/2022 11:20:21'!
printOn: aStream
	(self invariants allSatisfy: [:each| each = self scalars one])
		ifTrue: [aStream nextPut: $ùïÉ]
		ifFalse:
			[aStream nextPut: $‚Ñç.
			(self invariants allSatisfy: [:each| each = self scalars one negated])
				ifFalse: [aStream nextPutAll: (self invariants first printString, ',', self invariants second printString) sub]].
	aStream nextPut: $(; print: self scalars; nextPut: $)
"	aStream print: self invariants; nextPutAll: self scalars printString sub"! !

!QuaternionAlgebra methodsFor: 'testing' stamp: 'len 6/11/2020 19:36:38'!
isCentral
	^ true! !

!QuaternionAlgebra methodsFor: 'testing' stamp: 'len 6/11/2020 19:30:56'!
isCommutative
	"Quaternion algebras are always noncommutative."
	^ false! !

!QuaternionAlgebra methodsFor: 'testing' stamp: 'len 11/22/2023 20:51:51'!
isDivisionRing
	"A division ring, or skewfield, is a ring where division is possible, i.e. every nonzero element has a multiplicative inverse. The only difference with a field is that a division ring is not requiered to be commutative.
	An algebra is called a 'division algebra' if ax=b and xa=b have unique solutions for nonzero a.
	If the receiver is not a division algebra, it is isomorphic to the algebra of 2√ó2 matrices."
	self scalars = ‚Ñö ifTrue: [^ self discriminant ~= self scalars one].
	^ super isDivisionRing! !

!QuaternionAlgebra methodsFor: 'testing' stamp: 'len 7/21/2021 16:01:23'!
isInvolutive
	^ true! !

!QuaternionAlgebra methodsFor: 'testing' stamp: 'len 6/11/2020 19:36:34'!
isSimple
	^ true! !

!QuaternionAlgebra class methodsFor: 'instance creation' stamp: 'len 4/5/2024 19:07:35'!
over: aRing invariants: anArray
	"Given invariants a and b, answer the quaternion algebra over aRing (of characteristic not 2) generated by i and j such that:
		i^2 = a,
		j^2 = b,
		ji = -ij."
	| a b V u i j k |
	(anArray size = 2 and: [(a := aRing !! (anArray at: 1)) isUnit and: [(b := aRing !! (anArray at: 2)) isUnit]])
		ifFalse: [^ Error signal].
	V := aRing^4.
	u := V x: 1.
	i := V x: 2.
	j := V x: 3.
	k := V x: 4.
	^ super one: V generators first multiplication: (BilinearMap on: V table:
		{
		{u. i. j. k}.
		{i. u*a. k. j*a}.
		{j. k*-1. u*b. i*b*-1}.
		{k. j*a*-1.  i*b. u*a*b*-1}})! !

!Quaternion methodsFor: 'accessing' stamp: 'len 4/30/2021 12:42:19'!
imaginary
	"Answer the imaginary part of the receiver."
	^ self - self real! !

!Quaternion methodsFor: 'accessing' stamp: 'len 12/1/2024 14:10:59'!
real
	"Answer the real part of the receiver."
	^ self parent one * (carrier at: 1)! !

!Quaternion methodsFor: 'converting' stamp: 'len 12/1/2024 14:10:59'!
asScalar
	self isScalar ifFalse: [^ self error: 'not a scalar element'].
	^ carrier at: 1! !

!Quaternion methodsFor: 'operations' stamp: 'len 12/1/2024 14:13:46'!
conjugate
	"Answer the conjugate of the receiver, such that the reduced trace is the conjugate plus the receiver, and the reduced norm is the conjugate times the receiver."
	^ self class parent: parent carrier: (carrier withIndexCollect: [:each :i| i=1 ifTrue: [each] ifFalse: [each negated]])

"alternatively:
	^ self negated + self trace
"! !

!Quaternion methodsFor: 'operations' stamp: 'len 7/16/2020 19:02:30'!
inverse
	^ self conjugate * self norm inverse! !

!Quaternion methodsFor: 'operations' stamp: 'len 12/1/2024 14:10:22'!
norm
	"Answer the reduced norm of the receiver."
	^ (self * self conjugate) carrier at: 1! !

!Quaternion methodsFor: 'operations' stamp: 'len 12/1/2024 14:54:16'!
trace
	"Answer the reduced trace of the receiver."
	^ (self + self conjugate) carrier at: 1! !

!Quaternion methodsFor: 'printing' stamp: 'len 12/1/2024 14:10:59'!
printOn: aStream
	| P f |
	P _ self parent scalars polynomialsIn: #(i j k) ordering: #llex.
	f _ P constant: (carrier at: 1).
	2 to: 4 do: [:i| f _ (P x: i-1) * (carrier at: i) + f].
	f printOn: aStream! !

!Quaternion methodsFor: 'testing' stamp: 'len 6/11/2020 19:45:58'!
isIsotropic
	^ self isZero not and: [self norm isZero]! !

!Quaternion methodsFor: 'testing' stamp: 'len 12/1/2024 14:10:59'!
isPure
	^ (carrier at: 1) isZero! !

!Quaternion methodsFor: 'testing' stamp: 'len 12/1/2024 14:10:59'!
isScalar
	^ (2 to: 4) allSatisfy: [:i| (carrier at: i) isZero]! !
